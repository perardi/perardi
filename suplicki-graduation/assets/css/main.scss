@import "normalize.scss";

/*! HTML5 Boilerplate v8.0.0 | MIT License | https://html5boilerplate.com/ */

/* main.css 2.1.0 | MIT License | https://github.com/h5bp/main.css#readme */
/*
 * What follows is the result of much research on cross-browser styling.
 * Credit left inline and big thanks to Nicolas Gallagher, Jonathan Neal,
 * Kroc Camen, and the H5BP dev community and team.
 */

/* ==========================================================================
   Base styles: opinionated defaults
   ========================================================================== */

html {
  color: #222;
  font-size: 1em;
  line-height: 1.0;
}

/*
 * Remove text-shadow in selection highlight:
 * https://twitter.com/miketaylr/status/12228805301
 *
 * Vendor-prefixed and regular ::selection selectors cannot be combined:
 * https://stackoverflow.com/a/16982510/7133471
 *
 * Customize the background color to match your design.
 */

::-moz-selection {
  background: #b3d4fc;
  text-shadow: none;
}

::selection {
  background: #b3d4fc;
  text-shadow: none;
}

/*
 * A better looking default horizontal rule
 */

hr {
  display: block;
  height: 1px;
  border: 0;
  border-top: 1px solid #ccc;
  margin: 1em 0;
  padding: 0;
}

/*
 * Remove the gap between audio, canvas, iframes,
 * images, videos and the bottom of their containers:
 * https://github.com/h5bp/html5-boilerplate/issues/440
 */

audio,
canvas,
iframe,
img,
svg,
video {
  vertical-align: middle;
}

/*
 * Remove default fieldset styles.
 */

fieldset {
  border: 0;
  margin: 0;
  padding: 0;
}

/*
 * Allow only vertical resizing of textareas.
 */

textarea {
  resize: vertical;
}

/* ==========================================================================
   Author's custom styles
   ========================================================================== */

   @mixin textGlitch($name, $intensity, $textColor, $background, $highlightColor1, $highlightColor2, $width, $height) {
  
    color: $textColor;
    position: relative;
    $steps: $intensity;
    
    // Ensure the @keyframes are generated at the root level
    @at-root {
      // We need two different ones
      @for $i from 1 through 2 {
        @keyframes #{$name}-anim-#{$i} {
          @for $i from 0 through $steps {
            $top: random(100);
            $bottom: random(101 - $top);
            #{percentage($i*(1/$steps))} {
              clip-path: inset(#{$top}% 0 #{$bottom}% 0);
            }
          }
        }
      }
    }
    &::before,
    &::after {
      content: attr(data-text);
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      background: $background;
    }
    &::after {
      left: 2px;
      text-shadow: -1px 0 $highlightColor1;
      animation: #{$name}-anim-1 2s infinite linear alternate-reverse;
    }
    &::before {
      left: -2px;
      text-shadow: 2px 0 $highlightColor2; 
      animation: #{$name}-anim-2 3s infinite linear alternate-reverse;
    }
  }
  
  
  @mixin imgGlitch($name, $intensity, $width, $height, $top, $left) {
    
    $steps: $intensity;
    
    // Ensure the @keyframes are generated at the root level
    @at-root {
      // We need two different ones
      @for $i from 1 through 2 {
        @keyframes #{$name}-anim-#{$i} {
          @for $i from 0 through $steps {
            $top: random(100);
            $bottom: random(101 - $top);
            #{percentage($i*(1/$steps))} {
              clip-path: inset(#{$top}% 0 #{$bottom}% 0);
            }
          }
        }
      }
    }
    
    > img {
      position: absolute;
      top: $top+px;
      left: $left+px;
    }
    > img:nth-child(2),
    > img:nth-child(3){
    }
    > img:nth-child(2) {
      left: ($left + 2) + px;
      animation: #{$name}-anim-1 2s infinite linear alternate-reverse;
    }
    > img:nth-child(3) {
      left: ($left - 2) + px;
      animation: #{$name}-anim-2 3s infinite linear alternate-reverse;
    }
  }
  
  
  
  @mixin svgGlitch($name, $intensity, $fillColor, $background, $fillHighlight1, $fillHighlight2, $width, $height, $top, $left) {
    
    $steps: $intensity;
    
    // Ensure the @keyframes are generated at the root level
    @at-root {
      // We need two different ones
      @for $i from 1 through 2 {
        @keyframes #{$name}-anim-#{$i} {
          @for $i from 0 through $steps {
            $top: random(100);
            $bottom: random(101 - $top);
            #{percentage($i*(1/$steps))} {
              clip-path: inset(#{$top}% 0 #{$bottom}% 0);
            }
          }
        }
      }
    }
    
    svg {
      position: absolute;
      top: $top+px;
      left: $left+px;
      fill: $fillColor;
      background: $background;
      width: $width+px;
      height: $height+px;
    }
    svg:nth-child(2),
    svg:nth-child(3) {
    }
    svg:nth-child(2) {
      fill: $fillHighlight1;
      left: ($left - 2) + px;
      animation: #{$name}-anim-1 2s infinite linear alternate-reverse;
    }
    svg:nth-child(3) {
      fill: $fillHighlight2;
      left: ($left + 2) + px;
      animation: #{$name}-anim-2 3s infinite linear alternate-reverse;
    }
  }
  
  

@font-face {
    font-family: 'silkscreennormal';
    src: url('/fonts/slkscr-webfont.woff') format('woff');
    font-weight: normal;
    font-style: normal;
}

@mixin breakpoint($point) {
	@if $point == papa-bear {
	  @media (max-width: 1600px) { @content; }
	}
	@else if $point == mama-bear {
	  @media (max-width: 1024px) { @content; }
	}
	@else if $point == teenage-bear {
		@media (min-width: 650px)  { @content; }
	  }
	@else if $point == baby-bear {
	  @media (max-width: 650px)  { @content; }
	}

	@else if $point == newborn-bear {
		@media (max-width: 330px)  { @content; }
	}
}


body {
  background-color: #001118;
  color: #4ce3ee;
  font-family: 'silkscreennormal'; 
}

header {
  background:         #001118 url('/img/bg.jpg') no-repeat scroll top center;
  background-size:    cover;
  min-height:         100vh;

  div {
    width:            100%;
    display:          flex;
    flex-direction:   row;
    align-items:      center;
    justify-content:  center;
    
    img {
      height:         20rem;
      position:       relative;

      &:first-of-type {
        height:       18rem;
        z-index:      10;
        right:        -3rem;
      }

      &:last-of-type {
        z-index:      20;
        left:         -3rem;
      }
    }
  }
}

h1 {
  font-weight:        normal;
  font-size:          4vw;

  @include breakpoint(baby-bear) {
		font-size:        2rem;
	}

  padding:            1vw 0 4vw 0;
  margin: 0;
  width: 100%;
  text-align: center;


  span {
    color: #fe04ff;
  }
}

h2 {
  font-weight: normal;
  font-size: 1vw;
  @include breakpoint(baby-bear) {
		font-size: 0.75rem;
	}
  padding: 2vw 0 0 0;
  margin: 0;
  width: 100%;
  text-align: center;  
}

main {
  width: 100%;

  h3 {
    margin: 0;
    padding: 0;
    text-align: center;
  }

  ul {
    list-style-type: none;
    display: grid;
    padding: 0;
    margin: 0;

    li {
      margin: 0;
      padding: 0;
    }
  }
}

